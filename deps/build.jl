using CxxWrap # this is needed for opening the dependency lib. Otherwise Libdl.dlopen fails
using Libdl

const depsfile = joinpath(@__DIR__, "deps.jl")
const LCIO_DIR = get(ENV, "LCIO_DIR", nothing)
const LCIOJL_DIR = get(ENV, "LCIOJL_DIR", nothing)

if LCIO_DIR === nothing && LCIOJL_DIR === nothing
    # By default, use HDF5_jll
    open(depsfile, "w") do io
        print(io,
              """
              # This file is automatically generated
              # Do not edit
              using LCIO_jll
              using LCIO_Julia_Wrapper_jll
              check_deps() = nothing
              """
             )
    end
elseif LCIOJL_DIR === nothing
    liblcio = find_library("liblcio", [LCIO_DIR])
    isempty(liblcio) && error("liblcio not found in $LCIO_DIR")

    libsio = find_library("libsio", [LCIO_DIR])
    isempty(libsio) && error("libsio not found in $LCIO_DIR")

    liblcio_size = filesize(dlpath(liblcio))
    libsio_size = filesize(dlpath(libsio))

    open(depsfile, "w") do io
        println(io,
                """
                # This file is automatically generated
                # Do not edit
                using LCIO_Julia_Wrapper_jll
                function check_deps()
                    if liblcio_size != filesize(Libdl.dlpath(liblcio))
                        error("LCIO library has changed, re-run Pkg.build(\\\"LCIO\\\")")
                    end
                    if libsio_size != filesize(Libdl.dlpath(libsio))
                        error("SIO library has changed, re-run Pkg.build(\\\"LCIO\\\")")
                    end
                end
                """
               )
        println(io, :(const liblcio = $liblcio))
        println(io, :(const libsio = $libsio))
        println(io, :(const liblcio_size = $liblcio_size))
        println(io, :(const libsio_size = $libsio_size))
    end
elseif LCIO_DIR === nothing
    lciowrap = find_library("lciowrap", [LCIOJL_DIR])
    isempty(lciowrap) && error("lciowrap not found in $LCIOJL_DIR")

    lciowrap_size = filesize(dlpath(lciowrap))

    open(depsfile, "w") do io
        println(io,
                """
                # This file is automatically generated
                # Do not edit
                using LCIO_jll
                function check_deps()
                    if lciowrap_size != filesize(Libdl.dlpath(lciowrap))
                        error("LCIOWrap library has changed, re-run Pkg.build(\\\"LCIO\\\")")
                    end
                end
                """
               )
        println(io, :(const lciowrap = $lciowrap))
        println(io, :(const lciowrap_size = $lciowrap_size))
    end
else
    liblcio = find_library("liblcio", [LCIO_DIR])
    isempty(liblcio) && error("liblcio not found in $LCIO_DIR")

    libsio = find_library("libsio", [LCIO_DIR])
    isempty(libsio) && error("libsio not found in $LCIO_DIR")

    lciowrap = find_library("lciowrap", [LCIOJL_DIR])
    isempty(lciowrap) && error("lciowrap not found in $LCIOJL_DIR")

    liblcio_size = filesize(dlpath(liblcio))
    libsio_size = filesize(dlpath(libsio))
    lciowrap_size = filesize(dlpath(lciowrap))

    open(depsfile, "w") do io
        println(io,
                """
                # This file is automatically generated
                # Do not edit
                function check_deps()
                    if liblcio_size != filesize(Libdl.dlpath(liblcio))
                        error("LCIO library has changed, re-run Pkg.build(\\\"LCIO\\\")")
                    end
                    if libsio_size != filesize(Libdl.dlpath(libsio))
                        error("SIO library has changed, re-run Pkg.build(\\\"LCIO\\\")")
                    end
                    if lciowrap_size != filesize(Libdl.dlpath(lciowrap))
                        error("LCIOWrap library has changed, re-run Pkg.build(\\\"LCIO\\\")")
                    end
                end
                """
               )
        println(io, :(const liblcio = $liblcio))
        println(io, :(const libsio = $libsio))
        println(io, :(const lciowrap = $lciowrap))
        println(io, :(const liblcio_size = $liblcio_size))
        println(io, :(const libsio_size = $libsio_size))
        println(io, :(const lciowrap_size = $lciowrap_size))
    end
end
