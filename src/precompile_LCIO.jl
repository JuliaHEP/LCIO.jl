function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(LCIO.close), CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCWriter}})
    precompile(Tuple{typeof(LCIO.createLCWriter)})
    precompile(Tuple{typeof(LCIO.getCollection), CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCEvent}, String})
    precompile(Tuple{typeof(LCIO.getEnergy), CxxWrap.CxxWrapCore.CxxPtr{LCIO.MCParticle}})
    precompile(Tuple{typeof(LCIO.getMomentum), CxxWrap.CxxWrapCore.CxxPtr{LCIO.MCParticle}})
    precompile(Tuple{typeof(LCIO.getNumberOfElements), LCIO.TypedCollectionAllocated{LCIO.SimCalorimeterHit}})
    precompile(Tuple{typeof(LCIO.getPDG), CxxWrap.CxxWrapCore.CxxPtr{LCIO.MCParticle}})
    precompile(Tuple{typeof(LCIO.getParents), CxxWrap.CxxWrapCore.CxxPtr{LCIO.MCParticle}})
    precompile(Tuple{typeof(LCIO.getTypeName), LCIO.TypedCollectionAllocated{LCIO.SimCalorimeterHit}})
    precompile(Tuple{typeof(LCIO.open), CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCWriter}, String, Int64})
    precompile(Tuple{typeof(LCIO.parameters), LCIO.LCRunHeaderImplAllocated})
    precompile(Tuple{typeof(LCIO.setPDG), LCIO.MCParticleImplAllocated, Int64})
    precompile(Tuple{typeof(LCIO.setRunNumber), LCIO.LCRunHeaderImplAllocated, Int64})
    precompile(Tuple{typeof(LCIO.setValue), CxxWrap.CxxWrapCore.CxxRef{LCIO.LCParameters}, String, Float32})
    precompile(Tuple{typeof(LCIO.setValue), CxxWrap.CxxWrapCore.CxxRef{LCIO.LCParameters}, String, Int64})
    precompile(Tuple{typeof(LCIO.setValue), CxxWrap.CxxWrapCore.CxxRef{LCIO.LCParameters}, String, String})
    precompile(Tuple{typeof(LCIO.writeEvent), CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCWriter}, LCIO.LCEventImplAllocated})
    precompile(Tuple{typeof(LCIO.writeRunHeader), CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCWriter}, LCIO.LCRunHeaderImplAllocated})
    precompile(Tuple{LCIO.CellIDDecoderAllocated{LCIO.SimCalorimeterHit}, CxxWrap.CxxWrapCore.CxxPtr{LCIO.SimCalorimeterHit}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Base.Pair{Symbol, Any}})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Base.Pair{Symbol, Any}})
    precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Type{Int}})
    precompile(Tuple{Type{CxxWrap.StdLib.StdString}, String})
    precompile(Tuple{Type{LCIO.CellIDDecoder{LCIO.SimCalorimeterHit}}, CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCCollection}})
    precompile(Tuple{Type{LCIO.CellIDDecoder{T1} where T1}, LCIO.TypedCollectionAllocated{LCIO.SimCalorimeterHit}})
    precompile(Tuple{Type{LCIO.LCCollectionVec}, String})
    precompile(Tuple{Type{LCIO.LCEventImpl}})
    precompile(Tuple{Type{LCIO.LCRunHeaderImpl}})
    precompile(Tuple{Type{LCIO.MCParticleImpl}})
    precompile(Tuple{Type{LCIO.TypedCollection{LCIO.MCParticle}}, CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCCollection}})
    precompile(Tuple{Type{LCIO.TypedCollection{LCIO.SimCalorimeterHit}}, CxxWrap.CxxWrapCore.CxxPtr{LCIO.LCCollection}})
    precompile(Tuple{Type{LCIO._LCStdHepRdrCpp}, String})
    precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})

    precompile(Tuple{typeof(CxxWrap.CxxWrapCore._get_function_pointer), String})
    precompile(Tuple{typeof(CxxWrap.CxxWrapCore._register_function_pointers), CxxWrap.CxxWrapCore.CppFunctionInfo, Bool})
    precompile(Tuple{typeof(CxxWrap.CxxWrapCore._register_function_pointers), CxxWrap.CxxWrapCore.CppFunctionInfo, Bool})
    precompile(Tuple{typeof(CxxWrap.CxxWrapCore.checkversion)})
    precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), CxxWrap.StdLib.StdStringAllocated})
    precompile(Tuple{typeof(CxxWrap.CxxWrapCore.delete), LCIO.TypedCollectionAllocated{LCIO.MCParticle}})

    isdefined(Base, Symbol("##catch_stack#49")) && precompile(Tuple{getfield(Base, Symbol("##catch_stack#49")), Bool, typeof(Base.catch_stack), Task})
    isdefined(Base, Symbol("##cp#12")) && precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
    isdefined(Base, Symbol("##cptree#11")) && precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
    isdefined(Base, Symbol("##mktempdir#19")) && precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#19")), String, Bool, typeof(Base.Filesystem.mktempdir), String})
    isdefined(Base, Symbol("##show_sym#372")) && precompile(Tuple{getfield(Base, Symbol("##show_sym#372")), Bool, typeof(Base.show_sym), Base.IOContext{Base.TTY}, String})
    isdefined(Base, Symbol("##show_sym#372")) && precompile(Tuple{getfield(Base, Symbol("##show_sym#372")), Bool, typeof(Base.show_sym), Base.IOContext{Base.TTY}, Symbol})
    isdefined(Base, Symbol("##show_sym#372")) && precompile(Tuple{getfield(Base, Symbol("##show_sym#372")), Bool, typeof(Base.show_sym), Base.TTY, String})
    isdefined(Base, Symbol("##show_sym#372")) && precompile(Tuple{getfield(Base, Symbol("##show_sym#372")), Bool, typeof(Base.show_sym), Base.TTY, Symbol})
    isdefined(Base, Symbol("##sprint#338")) && precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), typeof(identity), Array{Symbol, 1}, Int})
    isdefined(Base, Symbol("##temp_cleanup_later#14")) && precompile(Tuple{getfield(Base.Filesystem, Symbol("##temp_cleanup_later#14")), Bool, typeof(Base.Filesystem.temp_cleanup_later), String})
    isdefined(Base, Symbol("##tempname#17")) && precompile(Tuple{getfield(Base.Filesystem, Symbol("##tempname#17")), Bool, typeof(Base.Filesystem.tempname), String})
    isdefined(Base, Symbol("#cptree##kw")) && precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
    precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:Ï€}})
    precompile(Tuple{typeof(Base.:(*)), Float64, Float64, Float64})
    precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
    precompile(Tuple{typeof(Base.:(+)), Float32, Float64})
    precompile(Tuple{typeof(Base.:(/)), Float64, Float32})
    precompile(Tuple{typeof(Base.:(==)), CxxWrap.StdLib.StdStringDereferenced, String})
    precompile(Tuple{typeof(Base.:(==)), Int64, Int32})
    precompile(Tuple{typeof(Base.:(==)), Module, WeakRef})
    precompile(Tuple{typeof(Base.:(==)), Module, WeakRef})
    precompile(Tuple{typeof(Base.:(==)), UInt64, Int64})
    precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
    precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
    precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
    precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
    precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
    precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge), Bool})
    precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
    precompile(Tuple{typeof(Base.Math.cos_domain_error), Float64})
    precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
    precompile(Tuple{typeof(Base.Math.sin_domain_error), Float64})
    precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
    precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Nothing}, 1}, Array{Any, 1}})
    precompile(Tuple{typeof(Base._show_default), Base.TTY, Int})
    precompile(Tuple{typeof(Base.abs), Float64})
    precompile(Tuple{typeof(Base.active_project), Bool})
    precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Ptr{Nothing}, Base.InterpreterIP}}})
    precompile(Tuple{typeof(Base.catch_backtrace)})
    precompile(Tuple{typeof(Base.cmp), CxxWrap.StdLib.StdStringDereferenced, String})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
    precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
    precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
    precompile(Tuple{typeof(Base.convert), Type{Any}, CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{typeof(Base.convert), Type{CxxWrap.StdLib.StdStringAllocated}, String})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Core.SimpleVector})
    precompile(Tuple{typeof(Base.cos), Float64})
    precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
    precompile(Tuple{typeof(Base.first), String})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{String, DataType}, CxxWrap.StdLib.StdStringDereferenced})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
    precompile(Tuple{typeof(Base.getindex), CxxWrap.CxxWrapCore.ConstCxxRef{LCIO.BitField64}, String})
    precompile(Tuple{typeof(Base.hash), CxxWrap.StdLib.StdStringDereferenced, UInt64})
    precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, CxxWrap.StdLib.StdStringDereferenced})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}}, String})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}}, String})
    precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
    precompile(Tuple{typeof(Base.identify_package), String})
    precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
    precompile(Tuple{typeof(Base.iterate), Array{CxxWrap.CxxWrapCore.CppFunctionInfo, 1}, Int64})
    precompile(Tuple{typeof(Base.iterate), Array{CxxWrap.CxxWrapCore.CppFunctionInfo, 1}})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.iterate), LCIO.LCStdHepRdr})
    precompile(Tuple{typeof(Base.iterate), LCIO.TypedCollectionAllocated{LCIO.MCParticle}, Int64})
    precompile(Tuple{typeof(Base.iterate), LCIO.TypedCollectionAllocated{LCIO.MCParticle}})
    precompile(Tuple{typeof(Base.iterate), LCIO.TypedCollectionAllocated{LCIO.SimCalorimeterHit}, Int64})
    precompile(Tuple{typeof(Base.iterate), LCIO.TypedCollectionAllocated{LCIO.SimCalorimeterHit}})
    precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
    precompile(Tuple{typeof(Base.length), LCIO.TypedCollectionAllocated{LCIO.SimCalorimeterHit}})
    precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float32, Base.Val{2}})
    precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{2}})
    precompile(Tuple{typeof(Base.load_path)})
    precompile(Tuple{typeof(Base.load_path_expand), String})
    precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
    precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
    precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
    precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
    precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
    precompile(Tuple{typeof(Base.parentmodule), DataType})
    precompile(Tuple{typeof(Base.parentmodule), UnionAll})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, CxxWrap.CxxWrapCore.CppFunctionInfo})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, CxxWrap.CxxWrapCore.CppFunctionInfo})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, String})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Type{Int}, String})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Type{Int}})
    precompile(Tuple{typeof(Base.print), Base.TTY, CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}, Char})
    precompile(Tuple{typeof(Base.print), Base.TTY, CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{typeof(Base.print_to_string), CxxWrap.CxxWrapCore.CppFunctionInfo})
    precompile(Tuple{typeof(Base.print_to_string), CxxWrap.CxxWrapCore.CppFunctionInfo})
    precompile(Tuple{typeof(Base.println), Base.TTY, CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{typeof(Base.println), CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{typeof(Base.project_deps_get), String, String})
    precompile(Tuple{typeof(Base.register_root_module), Module})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}}, Int64})
    precompile(Tuple{typeof(Base.require), Base.PkgId})
    precompile(Tuple{typeof(Base.require), Module, Symbol})
    precompile(Tuple{typeof(Base.reverse), Array{Symbol, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}, 1}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}, Int64})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Bool}, String})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Module})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Ptr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Type{Int}})
    precompile(Tuple{typeof(Base.show), Base.TTY, Module})
    precompile(Tuple{typeof(Base.show), Base.TTY, Type})
    precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{Base.TTY}, DataType})
    precompile(Tuple{typeof(Base.show_datatype), Base.TTY, DataType})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.TTY}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.TTY, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.show_sym), Base.IOContext{Base.TTY}, String})
    precompile(Tuple{typeof(Base.show_sym), Base.TTY, String})
    precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{Base.TTY}, Core.TypeName})
    precompile(Tuple{typeof(Base.show_type_name), Base.TTY, Core.TypeName})
    precompile(Tuple{typeof(Base.sin), Float64})
    precompile(Tuple{typeof(Base.sizeof), CxxWrap.CxxWrapCore.ConstCxxPtr{CxxWrap.StdLib.StdVector{CxxWrap.StdLib.StdString}}})
    precompile(Tuple{typeof(Base.sqrt), Float64})
    precompile(Tuple{typeof(Base.stale_cachefile), String, String})
    precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Val{2}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.nameof), Tuple{Base.Broadcast.Extruded{Array{Module, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.vect), Module})

end
